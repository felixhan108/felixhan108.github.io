{"componentChunkName":"component---src-templates-blog-post-js","path":"/note/Backend/","result":{"data":{"site":{"siteMetadata":{"title":"Minimal Software Developer"}},"markdownRemark":{"id":"588d33ba-d0e7-576b-b3d1-5c1a3e669cac","excerpt":"백엔드 JOB 포지션 서버 개발 데이터베이스 설계 및 관리 API 개발 보안 및 인프라 관리 네트워크 설정 기본지식 네트워크 좀 더 깊이 있게 공부하고 싶다면 다음 키워드를 검색 내부 IP, 외부 IP 유동 IP, 고정 IP DNS, hots 파일 레스트리, 레스트라 well-konwn…","html":"<h2>백엔드 JOB 포지션</h2>\n<ul>\n<li>서버 개발</li>\n<li>데이터베이스 설계 및 관리</li>\n<li>API 개발</li>\n<li>보안 및 인프라 관리</li>\n<li>네트워크 설정</li>\n</ul>\n<h2>기본지식</h2>\n<h3>네트워크</h3>\n<blockquote>\n<p>좀 더 깊이 있게 공부하고 싶다면 다음 키워드를 검색</p>\n</blockquote>\n<ul>\n<li>내부 IP, 외부 IP</li>\n<li>유동 IP, 고정 IP</li>\n<li>DNS, hots 파일</li>\n<li>레스트리, 레스트라</li>\n<li>well-konwn port, registred prot, dynamic port</li>\n<li>포트 포워딩</li>\n<li>OSI 7계층, TCP/IP 4계층</li>\n</ul>\n<h3>운영체제</h3>\n<blockquote>\n<p>운영체제의 주요 기능</p>\n</blockquote>\n<ul>\n<li>프로세스 관리</li>\n<li>메모리 관리</li>\n<li>파일 시스템 관리</li>\n<li>네트워크 관리</li>\n</ul>\n<blockquote>\n<p>DeepDive</p>\n</blockquote>\n<ul>\n<li>뮤텍스</li>\n<li>세마포어</li>\n<li>데드록</li>\n<li>기아 현상</li>\n<li>식사하는 철학자 문제</li>\n<li>피터슨 알고리즘</li>\n<li>CPU 스케주링 알고리즘 : FCFS, SJF, SRF, RR</li>\n</ul>\n<h3>데이터베이스</h3>\n<p>entity : 명사 -> 회원\nattribute : 명사 안에 있는 속성 -> 회원번호,이름,나이 등..\nrelation : 저장 단위 -> 표</p>\n<ul>\n<li>tuple : 행단위 데이터</li>\n<li>domain : 각 속성이 가질 수 있는 값의 집합 예) 이름 속성의 도메인은 {2~10글자 문자열}</li>\n<li>key : 테이블 내 속성 간의 관계와 테이블 간의 관계\n<ul>\n<li>슈퍼키</li>\n<li>후보키</li>\n<li>대체키</li>\n<li>기본키 : 중복X, 최소1개 (예 : 회원번호)</li>\n<li>외래키 : 테이블간의 관계를 나타내는 키 (예 : 주문 테이블에서 사용된 '회원번호'는 회원 테이블의 기본 키 이다. )</li>\n</ul>\n</li>\n</ul>\n<h3>자료구조</h3>\n<blockquote>\n<p>[!note] 시간복잡도</p>\n<ul>\n<li>O(1) : 각각의 요소를 탐색하는 시간</li>\n<li>O(log n) : 로그 시간 복잡도 : 요소 수가 많아져도 비교적 시간 상승폭이 완만함</li>\n<li>O(n) : 선형 시간 복잡도 : 입력되는 요소 수에 비례</li>\n<li>O(n2) : 제곱 시간 복잡도 : 입력되는 요소 수의 제곱에 비례해 시간이 걸립니다.</li>\n</ul>\n</blockquote>\n<h4>배열 : Array[]</h4>\n<blockquote>\n<p>배열은 삽입 하거나 삭제 하는 방식 보단 '탐색'의 비중이 높은 경우 많이 사용됩니다.</p>\n</blockquote>\n<h4>연결 리스트 : linked-list</h4>\n<blockquote>\n<p>[!note] 캐러셀 또는 슬라이드 구현\n큰 데이터셋의 효율적인 삽입/삭제가 필요한 경우</p>\n</blockquote>\n<blockquote>\n<p>삽입 또는 삭제에 걸리는 시간이 O(1)로 빠른 편\n탐색 시간은 O(n)이 소요 됩니다.</p>\n</blockquote>\n<h4>스택</h4>\n<blockquote>\n<p>[!note] 브라우저의 뒤로 가기 / 앞으로 가기\n실행 취소/다시 실행 기능\n깊이 우선 탐색 (DFS) 알고리즘을 사용하는 경우 (복잡한 트리 구조 탐색)</p>\n</blockquote>\n<blockquote>\n<p>바구니 방식 들어오는 순서와 나가는 순서가 다름</p>\n</blockquote>\n<h4>큐</h4>\n<blockquote>\n<p>들어온 순서대로 나가는 방식</p>\n</blockquote>\n<h4>그래프 : graph</h4>\n<blockquote>\n<p>[!note] 소셜 네트워크 관계표현, 내비게이션 시스템이나 경로 찾기 알고리즘 구현</p>\n</blockquote>\n<blockquote>\n<p>vertex 와 edge(간선)으로 이루어짐</p>\n</blockquote>\n<h4>트리 : tree</h4>\n<blockquote>\n<p>계층적 데이터의 집합 : dom html은 tree 구조임</p>\n</blockquote>\n<h4>맵 : map</h4>\n<blockquote>\n<p>키-값(key-value) 쌍으로 이뤄진 데이터의 집합 : Object, NoSql 이 이 형식임.</p>\n</blockquote>\n<h4>Deep Dive</h4>\n<ul>\n<li>선형 자료구조, 비선형 자료구조</li>\n<li>해시 테이블</li>\n<li>이진 트리</li>\n<li>이진 검색 트리</li>\n<li>힙</li>\n<li>우선수위 큐</li>\n</ul>\n<h3>객체지향</h3>\n<blockquote>\n<p>[!note] javascript의 api\n대부분 객체지향으로 작성되어 있어 구조를 이해하기가 편하다.</p>\n</blockquote>\n<h4>추상화</h4>\n<p>class 정의</p>\n<h4>캡슐화</h4>\n<p>속성과 그 속성을 조작하는 기능(함수)를 하나의 '캡슐'로 묶는 것을 말함.\n외부로 노출하고 싶은 속성이나 기능을 제어하기 위함</p>\n<h4>상속</h4>\n<p>기존 기능에서 새로운거 하나가 특별하게 추가되야 할때 적용 하는 방식</p>\n<h3>함수형 프로그래밍</h3>\n<h4>불변성</h4>\n<p>immutability : 데이터는 일단 생성되면 변하지 않아야 한다.\n겉보기에는 불편하게 여겨질 수 있으나 아래와 같은 장점이 있다.</p>\n<ul>\n<li>어떤 변수가 예상치 못한 상황에서 엉뚱한 값으로 바뀔 가능성이 있음.</li>\n<li>자신이 작성한 프로그램이 어떻게 동작할지 예측하고 프로그래밍할 수 있음.</li>\n</ul>\n<h4>선언형</h4>\n<p>==무엇을 어떻게 할 것인지== -> =='무엇이 할 것인지'== 에 초점을 둡니다.</p>\n<h2>DBMS</h2>\n<h3>RDBMS - 관계형 데이터 베이스</h3>\n<blockquote>\n<p>[!note] RDBMS 종류\nOracle, MySQL, PostgreSQL, MariaDB</p>\n</blockquote>\n<h4>회원 테이블</h4>\n<table>\n<thead>\n<tr>\n<th>회원번호</th>\n<th>이메일</th>\n<th>비밀번호</th>\n<th>이름</th>\n<th>나이</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><a href=\"mailto:thepub@gmail.com\">thepub@gmail.com</a></td>\n<td>abc@#$</td>\n<td>김찰스</td>\n<td>20</td>\n</tr>\n<tr>\n<td>2</td>\n<td><a href=\"mailto:thepub@gmail.com\">thepub@gmail.com</a></td>\n<td>22</td>\n<td>한수철</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<h4>SQL (Structured Query Language)</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">/* User 데이터에서 30 살보다 크거나 같은 사람을 찾아줘 */</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">User</span> <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>NoSQL - SQL을 사용하지 않는 DBMS</h3>\n<p>RDBMS로 관리하기에 적합하지 않은 데이터입니다.\n저장 형식이 일정하지 않은 비정형 데이터를 효율적으로 관리하기 위해 개발 되었습니다.</p>\n<blockquote>\n<p>[!note] 저장유형\n도큐먼트데이터베이스, 키-값 데이터베이스, 그래프 데이터베이스</p>\n</blockquote>\n<h3>CRUD</h3>\n<h5>RDBMS에서의 CRUD</h5>\n<h5>user</h5>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>email</th>\n<th>password</th>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n</table>\n<h5>order</h5>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>userId</th>\n<th>productId</th>\n<th>count</th>\n<th>adress</th>\n<th>orderDate</th>\n</tr>\n</thead>\n</table>\n<h5>porudct</h5>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>stockQuantity</th>\n<th>price</th>\n</tr>\n</thead>\n</table>\n<h4>테이블 생성</h4>\n<p>CREATE 문을 실행하면 데이터가 저장되지 않은 빈 user 테이블이 생성 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">user</span> <span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">BIGINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n\temail <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tpassword <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tage <span class=\"token keyword\">INT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">order</span> <span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">BIGINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n\tuserId <span class=\"token keyword\">BIGINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tproductId <span class=\"token keyword\">BIGINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tcount <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tadress <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\torderDate <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> product <span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">BIGINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n\tname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tstockQuantity <span class=\"token keyword\">INT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tprice <span class=\"token keyword\">INT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>데이터 생성</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc@gamil.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc@@@'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'한성수'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>데이터 조회하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>데이터 수정하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">/* 비밀번호 수정 */</span>\n<span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">SET</span> password <span class=\"token operator\">=</span> <span class=\"token string\">'abcd@#$@#$'</span> <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'홍성수'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 결과확인 */</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>데이터 삭제하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'한성수'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>테이블 조인</h4>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">/* user 테이블의 id 와 order 테이블의 userID 가 같은 것을 연결 */</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token keyword\">order</span><span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>NoSQL</h3>\n<p>table = collection\ntuple = document (filed-value)</p>\n<ul>\n<li>데이터베이스_1\n<ul>\n<li>컬렉션_1\n<ul>\n<li>도큐먼트_1</li>\n<li>도큐먼트_2</li>\n<li>도큐먼트_3</li>\n</ul>\n</li>\n<li>컬렉션_2</li>\n</ul>\n</li>\n</ul>\n<h2>API</h2>\n<h3>API 개발 순서</h3>\n<ol>\n<li>엔드포인트 설계</li>\n<li>HTTP 매서드 지정</li>\n<li>데이터 포맷 및 프로토콜 선택</li>\n<li>엔드포인트 구현</li>\n<li>인증 및 보안</li>\n<li>오류 및 예외 처리</li>\n<li>테스트와 디버깅</li>\n<li>API 문서화</li>\n</ol>\n<h4>1. 엔드포인트 설계</h4>\n<p>/search, /curation 등을 결정함.</p>\n<h4>2.HTTP 메서드지정</h4>\n<p>POST, GET, PUT or PATCH, DELETE</p>\n<h4>3. 데이터 포맷 및 프로토콜 선택</h4>\n<p>데이터 포맷 : JSON, 프로토콜 : RESTful</p>\n<h4>4. 엔드포인트 구현</h4>\n<p>클라이언트의 요청을 받으면 데이터베이스에 접근해 데이터를 가져와 가공하고, 이를 클라이언트에 반환하는 프로그램 로직을 만듬.</p>\n<h4>5. 인증 및 보안</h4>\n<p>API를 보호하기 위해 인증 및 보안 메커니즘을 구현합니다.</p>\n<ul>\n<li>사용자 인증</li>\n<li>액세스 토큰 기반의 권한 부여</li>\n<li>암호화 등</li>\n</ul>\n<h4>오류 및 예외처리</h4>\n<p>잘못된 요청이나 예외 상황에 대해 적절한 오류 응답을 할 수 있도록 프로그램 로직을 보강</p>\n<h4>테스트와 디버깅</h4>\n<p>테스트와 디버깅 단계를 거쳐야 함, 그럼으로써 API의 정확성,안정성 등등..</p>\n<h4>API 문서화</h4>\n<p>앤드포인트, 매개변수, 응답 형식, 오류코드 등에 대한 명세를 문서로 작성</p>\n<h3>REST API</h3>\n<p>웹의 장점을 활용해 만든 API 설계 스타일</p>\n<h4>자원</h4>\n<p>서버가 주고받는 자원을 URI로 명시를 함.\n<a href=\"http://www.test.com/users/100\">http://www.test.com/users/100</a></p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">scheme:<span class=\"token punctuation\">[</span><span class=\"token function\">//</span><span class=\"token punctuation\">[</span><span class=\"token function\">user</span><span class=\"token punctuation\">[</span><span class=\"token function\">:passowrd</span><span class=\"token punctuation\">]</span>@<span class=\"token punctuation\">]</span>hots<span class=\"token punctuation\">[</span><span class=\"token function\">:port</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">/path</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">?query</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">#fragment</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h4>행위</h4>\n<p>CRUD 행위를 표현함\n/delete/users/1</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">GET /users/:id\nPOST /users\nPATCH /users/:id\nDELETE /users/:id</code></pre></div>\n<h4>표현</h4>\n<h3>GraphQL</h3>\n<h2>클라우드 컴퓨팅</h2>\n<p>AWS의 각종 서비스를 알아 봅니다.</p>\n<h3>서버 종류</h3>\n<h4>EC2</h4>\n<p>가상 컴퓨터 : 운영체제를 선택하고 서버를 운영할 수 있습니다.\n사용예 : 웹서버, API 서버, 프록시 서버, FTP 서버</p>\n<h4>S3</h4>\n<p>파일 저장 스토리지 : 파일을 넣고 꺼낼때 비용이 듬\n사용 예 : 웹사이트 호스팅, 미디어 콘텐츠 호스팅, 데이터 백업 및 복원, 데이터 저장 및 분석</p>\n<h4>RDS</h4>\n<p>데이터베이스 시스템 : 제공하는 시스템 - MySQL, PostgreSQL, Oracle등\n기능 : 데이터베이스 생성, 백업 &#x26; 복원, 모니터링, 자원 자동 조정</p>\n<h4>IAM</h4>\n<p>AWS 자원에 접근하고 사용할 수 있는 사용자 권한을 제어합니다.\n기능 : 사용자 권한 관리, 사용자 역활 관리, 사용자 그룹 관리, 자원 정책 접근 관리, 암호 정책, MFA 관리(MFA: Multi-Factor Authentication : 인증 요소를 사용하는 보안 매커니즘)</p>\n<h3>온프레미스 시스템</h3>\n<ol>\n<li>애플리케이션</li>\n<li>데이터</li>\n<li>런타임</li>\n<li>미들웨어</li>\n<li>운영체제</li>\n<li>가상화</li>\n<li>서버</li>\n<li>스토리지</li>\n<li>네트워크</li>\n</ol>\n<h3>IaaS</h3>\n<blockquote>\n<p>대표적인 시스템 : AWS, AZURE, GCP</p>\n</blockquote>\n<ol>\n<li>애플리케이션</li>\n<li>데이터</li>\n<li>런타임</li>\n<li>미들웨어</li>\n<li>운영체제</li>\n</ol>\n<h3>PaaS</h3>\n<blockquote>\n<p>대표적인 시스템 : \bHeroku, Google App Engine, Azure App Service</p>\n</blockquote>\n<ol>\n<li>애플리케이션</li>\n<li>데이터</li>\n</ol>\n<h3>SaaS</h3>\n<blockquote>\n<p>대표적인 시스템 : Saleforce, Google Workspace, Microsoft365</p>\n</blockquote>\n<ol>\n<li>전부다 제공해줌</li>\n</ol>\n<h2>가상화와 컨테이너</h2>\n<blockquote>\n<p>가상화(Virturalization)란?\n하나의 물리적인 서버를 여러대 처럼 사용하는 기법</p>\n</blockquote>\n<h3>도커</h3>\n<h4>도커구조</h4>\n<p>도커 클라이언트 -> 도커 호스트 -> 도커 데몬 -> 도커 이미지 -> 컨테이너 실행</p>\n<ul>\n<li>도커 클라이언트 : cli로 도커에게 명령합니다.\n<ul>\n<li>docker build</li>\n<li>docker pull</li>\n<li>docker run</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<h4>도커 허브</h4>\n<p>Hub.docker.com\n도커의 허브 (온라인 도커 저장소)</p>\n<h4>도커 이미지</h4>\n<p>도커 파일에 텍스트로 만드는 파일</p>\n<h4>컨테이너 실행과정</h4>\n<ol>\n<li>도커 실행</li>\n<li>도커 데몬 실행</li>\n<li>도커 이미지 find\n<ul>\n<li>로컬</li>\n<li>도커 허브 : 이미지가 없는 경우</li>\n</ul>\n</li>\n<li>새로운 컨테이너 생성 및 실행</li>\n<li>명령 실행 완료 후 컨테이너 종료</li>\n</ol>\n<h3>컨테이너 오케스트레이션</h3>\n<p>서버 클러스터(여러서버를 하나의 시스템으로 묶은것) 에서 다수의 컨테이너를 관리하기 위해 나옴</p>\n<h4>kubernetes (k8s)</h4>\n<p>전체적인 도커를 관리할 수 있는 거시기</p>\n<h2>웹 애플리케이션 아키텍쳐</h2>\n<h3>모놀리식 아키텍쳐</h3>\n<p>단 방향 전체 아키텍쳐\n모든 서버가 1개로 이루어 져있다고 보면된다.\n사용자 -> 클라이언트 -> 서버 -> 데이터베이스(게시글,동영상,이미지)</p>\n<h3>마이크로서비스 아키텍쳐</h3>\n<p>사용자 -> API 게이트웨이 -> 게시글(1), 이미지(1), 동영상(1)</p>\n<h3>서버리스 아키텍쳐</h3>\n<p>개발자가 서버를 신경쓰지 않고 개발하는 영역</p>\n<h4>BaaS(Backend as a Service)</h4>\n<ul>\n<li>firebase</li>\n<li>suapbase</li>\n<li>AWS AppSync</li>\n<li>Azure Cosmos DB</li>\n</ul>\n<h4>FaaS(Function as a Service)</h4>\n<h2>테스트와 CI/CD</h2>\n<p>ci/cd는 aws 로 운영할때 어떤식으로 작업할 수 있는지 github Action과 aws의 연계를 한번 해봅니다.</p>\n<h3>테스트</h3>\n<h4>V Model</h4>\n<ol>\n<li>요구 사항 분석</li>\n<li>시스템 설계</li>\n<li>상세 설계</li>\n<li>구현</li>\n<li>단위 테스트</li>\n<li>통합 테스트</li>\n<li>시스템 테스트</li>\n<li>인수 테스트</li>\n</ol>\n<h4>테스트 주도 개발(DDD, Test-Drvien Development)</h4>\n<ul>\n<li>빨강 : 개발 후 테스트할 영역을 미리 짜둔다.</li>\n<li>초록 : 초록색으로 바꿔가며 개발을 한다.</li>\n<li>리팩터링 : 초록색을 확인하며 리팩토링을 한다.</li>\n</ul>\n<h3>CI/CD</h3>\n<blockquote>\n<p>Continuous Integration / Continuous Delivery or Deploment (지속적 통합 / 지속적 배포)</p>\n</blockquote>\n<h4>flow</h4>\n<h5>CI (지속적 통합)</h5>\n<ol>\n<li>coding</li>\n<li>build</li>\n<li>test</li>\n</ol>\n<h5>CD (지속적 배포)</h5>\n<ol>\n<li>test</li>\n<li>release</li>\n<li>deploy</li>\n</ol>\n<h4>CI 도구</h4>\n<ul>\n<li>젠킨스</li>\n<li>깃허브 액션</li>\n<li>트래비스 CI</li>\n<li>서클 CI</li>\n</ul>\n<h4>CD 도구</h4>\n<ul>\n<li>AWS 코드디플로이</li>\n</ul>\n<h4>통상적인 구조</h4>\n<blockquote>\n<p>Jenkins || Github Actions -> AWS CodeDeploy</p>\n</blockquote>","frontmatter":{"title":"Backend 기초지식식","date":null,"description":"웹서버를 만들기 위한 기초지식을 정리해 보았습니다."}},"previous":{"fields":{"slug":"/note/DesignSystem/"},"frontmatter":{"title":"UI개발을 위한 DesignSystem Guide"}},"next":null},"pageContext":{"id":"588d33ba-d0e7-576b-b3d1-5c1a3e669cac","previousPostId":"b2986910-b569-5063-b08b-f8e89c68d2c1","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}